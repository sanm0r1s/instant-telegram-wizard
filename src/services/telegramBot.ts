import { BotTemplate } from '@/types/bot';

interface TelegramWebhookUpdate {
  update_id: number;
  message?: {
    message_id: number;
    from: {
      id: number;
      is_bot: boolean;
      first_name: string;
      username?: string;
    };
    chat: {
      id: number;
      type: string;
      username?: string;
    };
    text?: string;
    date: number;
  };
}

export class TelegramBotService {
  private apiToken: string;
  private templates: BotTemplate[];
  private apiKeys: Record<string, string>;
  private baseUrl: string;

  constructor(apiToken: string, templates: BotTemplate[], apiKeys: Record<string, string> = {}) {
    this.apiToken = apiToken;
    this.templates = templates;
    this.apiKeys = apiKeys;
    this.baseUrl = `https://api.telegram.org/bot${apiToken}`;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
  async validateToken(): Promise<{ valid: boolean; botInfo?: any; error?: string }> {
    try {
      const response = await fetch(`${this.baseUrl}/getMe`);
      const data = await response.json();
      
      if (data.ok) {
        return { valid: true, botInfo: data.result };
      } else {
        return { valid: false, error: data.description };
      }
    } catch (error) {
      return { valid: false, error: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API' };
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
  async setWebhook(webhookUrl: string): Promise<boolean> {
    try {
      const response = await fetch(`${this.baseUrl}/setWebhook`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ url: webhookUrl })
      });
      const data = await response.json();
      return data.ok;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook:', error);
      return false;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  async sendMessage(chatId: number, text: string, parseMode: string = 'HTML'): Promise<boolean> {
    try {
      const response = await fetch(`${this.baseUrl}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          text,
          parse_mode: parseMode
        })
      });
      const data = await response.json();
      return data.ok;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      return false;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  async handleUpdate(update: TelegramWebhookUpdate): Promise<void> {
    if (!update.message?.text) return;

    const chatId = update.message.chat.id;
    const text = update.message.text.toLowerCase();
    const userId = update.message.from.id;

    // –ö–æ–º–∞–Ω–¥–∞ /start
    if (text === '/start') {
      await this.handleStartCommand(chatId);
      return;
    }

    // –ö–æ–º–∞–Ω–¥–∞ /help
    if (text === '/help') {
      await this.handleHelpCommand(chatId);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω—ã
    await this.processMessageThroughTemplates(chatId, text, userId);
  }

  private async handleStartCommand(chatId: number): Promise<void> {
    const templateNames = this.templates.map(t => `‚Ä¢ ${t.name}`).join('\n');
    const welcomeMessage = `
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>

–í–∞—à –±–æ—Ç —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤:
${templateNames}

–û—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
    `;
    await this.sendMessage(chatId, welcomeMessage.trim());
  }

  private async handleHelpCommand(chatId: number): Promise<void> {
    const commands = this.generateCommandsList();
    const helpMessage = `
üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

${commands}

üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Ö —Å –ø–æ–º–æ—â—å—é –∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤.
    `;
    await this.sendMessage(chatId, helpMessage.trim());
  }

  private generateCommandsList(): string {
    const commands = ['/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ', '/help - –°–ø—Ä–∞–≤–∫–∞'];
    
    this.templates.forEach(template => {
      switch (template.id) {
        case 'reminder':
          commands.push('/remind - –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ');
          break;
        case 'translator':
          commands.push('/translate - –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç');
          break;
        case 'url-shortener':
          commands.push('/short - –°–æ–∫—Ä–∞—Ç–∏—Ç—å —Å—Å—ã–ª–∫—É');
          break;
        case 'polls-voting':
          commands.push('/poll - –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å');
          break;
      }
    });
    
    return commands.map(cmd => `‚Ä¢ ${cmd}`).join('\n');
  }

  private async processMessageThroughTemplates(chatId: number, text: string, userId: number): Promise<void> {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ –∫–∞–∂–¥—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —à–∞–±–ª–æ–Ω
    for (const template of this.templates) {
      const handled = await this.processTemplate(template, chatId, text, userId);
      if (handled) break; // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º –¥—Ä—É–≥–∏–º —à–∞–±–ª–æ–Ω–∞–º
    }
  }

  private async processTemplate(template: BotTemplate, chatId: number, text: string, userId: number): Promise<boolean> {
    switch (template.id) {
      case 'chatgpt':
        return await this.processChatGPT(chatId, text);
      
      case 'translator':
        return await this.processTranslator(chatId, text);
      
      case 'reminder':
        return await this.processReminder(chatId, text, userId);
      
      case 'url-shortener':
        return await this.processUrlShortener(chatId, text);
      
      case 'polls-voting':
        return await this.processPolls(chatId, text);
      
      case 'file-converter':
        return await this.processFileConverter(chatId, text);
      
      default:
        return false;
    }
  }

  private async processChatGPT(chatId: number, text: string): Promise<boolean> {
    if (!this.apiKeys['chatgpt']) {
      await this.sendMessage(chatId, '‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return true;
    }

    try {
      await this.sendMessage(chatId, 'ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...');
      
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiKeys['chatgpt']}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: 'gpt-3.5-turbo',
          messages: [{ role: 'user', content: text }],
          max_tokens: 500
        })
      });

      const data = await response.json();
      const reply = data.choices?.[0]?.message?.content || '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å';
      
      await this.sendMessage(chatId, `ü§ñ ${reply}`);
      return true;
    } catch (error) {
      await this.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ChatGPT');
      return true;
    }
  }

  private async processTranslator(chatId: number, text: string): Promise<boolean> {
    if (text.startsWith('/translate ') || text.includes('–ø–µ—Ä–µ–≤–µ–¥')) {
      const textToTranslate = text.replace('/translate ', '').replace(/–ø–µ—Ä–µ–≤–µ–¥[–∞-—è]*\s*/gi, '');
      
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Google Translate API –∏–ª–∏ LibreTranslate
        const response = await fetch('https://libretranslate.de/translate', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            q: textToTranslate,
            source: 'auto',
            target: 'en'
          })
        });

        const data = await response.json();
        await this.sendMessage(chatId, `üåê <b>–ü–µ—Ä–µ–≤–æ–¥:</b>\n${data.translatedText}`);
        return true;
      } catch (error) {
        await this.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return true;
      }
    }
    return false;
  }

  private async processReminder(chatId: number, text: string, userId: number): Promise<boolean> {
    if (text.startsWith('/remind ') || text.includes('–Ω–∞–ø–æ–º–Ω–∏')) {
      const reminderText = text.replace('/remind ', '').replace(/–Ω–∞–ø–æ–º–Ω–∏[–∞-—è]*\s*/gi, '');
      
      // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
      const reminderId = Date.now().toString();
      const reminderData = {
        id: reminderId,
        userId,
        chatId,
        text: reminderText,
        createdAt: new Date().toISOString()
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ - –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
      const reminders = JSON.parse(localStorage.getItem('botReminders') || '[]');
      localStorage.setItem('botReminders', JSON.stringify([...reminders, reminderData]));

      await this.sendMessage(chatId, `‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:</b>\n"${reminderText}"\n\nüí° ID: ${reminderId}`);
      return true;
    }
    return false;
  }

  private async processUrlShortener(chatId: number, text: string): Promise<boolean> {
    if (text.startsWith('/short ') || text.startsWith('http')) {
      const url = text.startsWith('/short ') ? text.replace('/short ', '') : text;
      
      try {
        // –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)
        const shortId = Math.random().toString(36).substring(2, 8);
        const shortUrl = `https://t.me/${shortId}`;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ - –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
        const urlMappings = JSON.parse(localStorage.getItem('botUrlMappings') || '{}');
        urlMappings[shortId] = url;
        localStorage.setItem('botUrlMappings', JSON.stringify(urlMappings));

        await this.sendMessage(chatId, `üîó <b>–ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:</b>\n${shortUrl}\n\nüìä –û—Ä–∏–≥–∏–Ω–∞–ª: ${url}`);
        return true;
      } catch (error) {
        await this.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–∏');
        return true;
      }
    }
    return false;
  }

  private async processPolls(chatId: number, text: string): Promise<boolean> {
    if (text.startsWith('/poll ')) {
      const pollData = text.replace('/poll ', '');
      const [question, ...optionsArray] = pollData.split('|');
      
      if (!question || optionsArray.length < 2) {
        await this.sendMessage(chatId, '‚ùå –§–æ—Ä–º–∞—Ç: /poll –í–æ–ø—Ä–æ—Å|–í–∞—Ä–∏–∞–Ω—Ç1|–í–∞—Ä–∏–∞–Ω—Ç2|...');
        return true;
      }

      try {
        const response = await fetch(`${this.baseUrl}/sendPoll`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            chat_id: chatId,
            question: question.trim(),
            options: optionsArray.map(opt => opt.trim()),
            is_anonymous: true
          })
        });

        if (!response.ok) {
          await this.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞');
        }
        return true;
      } catch (error) {
        await this.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞');
        return true;
      }
    }
    return false;
  }

  private async processFileConverter(chatId: number, text: string): Promise<boolean> {
    if (text.includes('–∫–æ–Ω–≤–µ—Ä—Ç') || text.includes('–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤')) {
      await this.sendMessage(chatId, `üìÑ <b>–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Ñ–∞–π–ª–æ–≤</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –ø–æ–¥–ø–∏—Å—å—é:
‚Ä¢ "–≤ pdf" - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ PDF
‚Ä¢ "–≤ jpg" - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ JPG  
‚Ä¢ "–≤ png" - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ PNG
‚Ä¢ "–≤ doc" - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ DOC

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF, DOC, JPG, PNG, GIF`);
      return true;
    }
    return false;
  }
}